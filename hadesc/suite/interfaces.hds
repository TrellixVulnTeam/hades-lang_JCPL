import submodule.test_utils as utils;
import submodule.printable_interface as pi;
import libc as c;

struct IntAndBool {
    val int: CInt;
    val bool: Bool;
}

def main(): Void {
    val value = IntAndBool(10, true);
    utils.print_int(value.get());
    utils.print_int(get_int(value));
    utils.print_bool(get[Bool](value));
    print(true);
    print(10);
    print(b"string");
}

implement pi.Printable for Bool {
    def print(this: Bool): Void {
        utils.print_bool(this);
    }
}

implement pi.Printable for *Byte {
    def print(this: *Byte): Void {
        c.puts(this);
    }
}

def get_int[T: Has[CInt]](value: T): CInt {
    return get[CInt, T](value);
}

def get[V, T: Has[V]](t: T): V {
    return t.get();
}

implement Has[CInt] for IntAndBool {
    def get(this: IntAndBool): CInt {
        return this.int;
    }
}
implement Has[Bool] for IntAndBool {
    def get(this: IntAndBool): Bool {
        return this.bool;
    }
}

interface Has[T] {
    def get(this: This): T;
}

def print[T: pi.Printable](value: T): Void {
    value.print();
}



import lib.UnsafeCast as UnsafeCast;
import lib.Assert as Assert;

struct Self[T, Err] {
    val m_is_error: Bool;
    val m_data: _Data[T, Err];
}

type _Data[T, Err] = union[T, Err];

type t[T, Err] = Self[T, Err];

def ok[Err, T](value: T): Self[T, Err] {
    return Self(false, UnsafeCast.upcast(value));
}

def error[T, Err](err: Err): Self[T, Err] {
    return Self(true, UnsafeCast.upcast(err));
}

def is_ok[T, Err](self: Self[T, Err]): Bool {
    return not is_error(self);
}

def is_error[T, Err](self: Self[T, Err]): Bool {
    return self.m_is_error;
}

def get_value[T, Err](self: Self[T, Err]): T {
    Assert.assert(is_ok(self));
    return UnsafeCast.downcast(self.m_data);
}

def get_error[T, Err](self: Self[T, Err]): Err {
    Assert.assert(is_error(self));
    return UnsafeCast.downcast(self.m_data);
}

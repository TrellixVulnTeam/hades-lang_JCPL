import hades.Result as Result;
import StubGen.Result as SGResult;
import StubGen.Error as SGError;
import hades.Debug as Debug;
import hades.Pointer as Pointer;
import hades.UnsafeCast as UnsafeCast;

struct t {
    val m_input_header: *Byte;
    val m_output_path: *Byte;
}

struct ParseError {
    val message: *Byte;
}


const USAGE = b"
USAGE: generate_c_stubs [...FLAGS] <INPUT_HEADER_PATH> <OUTPUT_HDS_FILE_PATH>
";
def parse(argc: Int, argv: **Byte): SGResult.t[t] {
    if (argc < 3) {
        return parse_error(b"Missing arguments.");
    }

    val OUTPUT_INDEX = UnsafeCast.upcast[Size](argc - 1);
    val INPUT_INDEX = UnsafeCast.upcast[Size](argc - 2);

    return Result.ok(t(*Pointer.offset(argv, INPUT_INDEX), *Pointer.offset(argv, OUTPUT_INDEX)));
}

def parse_error[T](message: *Byte): SGResult.t[T] {
    return Result.error(SGError.invalid_flags(ParseError(message)));
}




def impl(trait, op_method, ty):
    with open(f'./stdlib/hades/ops/{trait}.hds', 'a') as f:
        f.write(f"""
implementation {trait}[{ty}, {ty}] {{
    type Result = ty
    def {op_method}(lhs: {ty}, rhs: {ty}): {ty} {{
        return @intrinsic.{op_method}[{ty}](lhs, rhs)
    }}
}}
""")


def trait(trait, op_method):
    with open(f'./stdlib/hades/ops/{trait}.hds', 'w') as f:
        f.write(f""" // Autogenerated file. Do not edit.

trait {trait}[Left, Right] {{
    type Result
    
    def {op_method}(lhs: Left, rhs: Right): Result
}}

""")


integral_types = ['u8', 'i8', 'u16', 'i16', 'u32', 'i32', 'u64', 'i64', 'usize', 'isize']


def main():
    trait('Add', 'add')
    trait('Sub', 'sub')
    trait('Mul', 'mul')
    for ty in integral_types:
        impl('Add', 'add', ty)
        impl('Sub', 'sub', ty)
        impl('Mul', 'mul', ty)

    for ty in ['f32', 'f64']:
        impl('Add', 'add', ty)
        impl('Sub', 'sub', ty)
        impl('Mul', 'mul', ty)


if __name__ == '__main__':
    main()

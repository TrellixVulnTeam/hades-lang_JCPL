import libc as libc;

def free[T](ptr: *T): Void {
    libc.free(pointer_cast[Void](ptr));
}

def unsafe_allocate_unitialized[T](): *T {
    return pointer_cast[T](libc.malloc(size_of[T]));
}

extern def __hds_pointer_add(*Void, Size): *Void = __hds_pointer_add;

def offset[T](this: *T, index: Size): *T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](this), index * size_of[T]));
}

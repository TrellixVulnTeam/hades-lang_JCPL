type t = Int;

def EPERM(): Int { return  1; }
def ENOENT(): Int { return  2; }
def ESRCH(): Int { return  3; }
def EINTR(): Int { return  4; }
def EIO(): Int { return  5; }
def ENXIO(): Int { return  6; }
def E2BIG(): Int { return  7; }
def ENOEXEC(): Int { return  8; }
def EBADF(): Int { return  9; }
def ECHILD(): Int { return 10; }
def EAGAIN(): Int { return 11; }
def ENOMEM(): Int { return 12; }
def EACCES(): Int { return 13; }
def EFAULT(): Int { return 14; }
def ENOTBLK(): Int { return 15; }
def EBUSY(): Int { return 16; }
def EEXIST(): Int { return 17; }
def EXDEV(): Int { return 18; }
def ENODEV(): Int { return 19; }
def ENOTDIR(): Int { return 20; }
def EISDIR(): Int { return 21; }
def EINVAL(): Int { return 22; }
def ENFILE(): Int { return 23; }
def EMFILE(): Int { return 24; }
def ENOTTY(): Int { return 25; }
def ETXTBSY(): Int { return 26; }
def EFBIG(): Int { return 27; }
def ENOSPC(): Int { return 28; }
def ESPIPE(): Int { return 29; }
def EROFS(): Int { return 30; }
def EMLINK(): Int { return 31; }
def EPIPE(): Int { return 32; }
def EDOM(): Int { return 33; }
def ERANGE(): Int { return 34; }

def description(err: Int): *Byte {
    if err == EPERM() {
        return b"EPERM: Operation not permitted";
    }
    if err == ENOENT() {
        return b"ENOENT: No such file or directory";
    }
    if err == ESRCH() {
        return b"ESRCH: No such process";
    }
    if err == EINTR() {
        return b"EINTR: Interrupted system call";
    }
    if err == EIO() {
        return b"EIO: I/O error";
    }
    if err == ENXIO() {
        return b"ENXIO: No such device or address";
    }
    if err == E2BIG() {
        return b"E2BIG: Argument list too long";
    }
    if err == ENOEXEC() {
        return b"ENOEXEC: Exec format error";
    }
    if err == EBADF() {
        return b"EBADF: Bad file number";
    }
    if err == ECHILD() {
        return b"ECHILD: No child processes";
    }
    if err == EAGAIN() {
        return b"EAGAIN: Try again";
    }
    if err == ENOMEM() {
        return b"ENOMEM: Out of memory";
    }
    if err == EACCES() {
        return b"EACCES: Permission denied";
    }
    if err == EFAULT() {
        return b"EFAULT: Bad address";
    }
    if err == ENOTBLK() {
        return b"ENOTBLK: Block device required";
    }
    if err == EBUSY() {
        return b"EBUSY: Device or resource busy";
    }
    if err == EEXIST() {
        return b"EEXIST: File exists";
    }
    if err == EXDEV() {
        return b"EXDEV: Cross-device link";
    }
    if err == ENODEV() {
        return b"ENODEV: No such device";
    }
    if err == ENOTDIR() {
        return b"ENOTDIR: Not a directory";
    }
    if err == EISDIR() {
        return b"EISDIR: Is a directory";
    }
    if err == EINVAL() {
        return b"EINVAL: Invalid argument";
    }
    if err == ENFILE() {
        return b"ENFILE: File table overflow";
    }
    if err == EMFILE() {
        return b"EMFILE: Too many open files";
    }
    if err == ENOTTY() {
        return b"ENOTTY: Not a typewriter";
    }
    if err == ETXTBSY() {
        return b"ETXTBSY: Text file busy";
    }
    if err == EFBIG() {
        return b"EFBIG: File too large";
    }
    if err == ENOSPC() {
        return b"ENOSPC: No space left on device";
    }
    if err == ESPIPE() {
        return b"ESPIPE: Illegal seek";
    }
    if err == EROFS() {
        return b"EROFS: Read-only file system";
    }
    if err == EMLINK() {
        return b"EMLINK: Too many links";
    }
    if err == EPIPE() {
        return b"EPIPE: Broken pipe";
    }
    if err == EDOM() {
        return b"EDOM: Math argument out of domain of func";
    }
    if err == ERANGE() {
        return b"ERANGE: Math result not representable";
    }
    return b"";
}
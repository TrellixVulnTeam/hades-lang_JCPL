
/// Empty marker trait that indicates that a given type
/// can be copied. This includes storing it in a local
/// variable (apart from the first assignment) or a struct field, or
/// passing it to a function as an argument. For non owning uses,
/// these can be passed by pointer.
/// This is automatically generated by the compiler for aggregate
/// types (structs and enums) that only contain Copyable types, except
/// in cases where there's an explicit implementation of NoCopy for the
/// type.
///
/// Non copyable types can only be moved, using the `move` keyword, which
/// removes them from scope, and the compiler will issue
/// an error if there is an attempt to use the value after move.
///
/// NOTE: There's no alias checking, so the compiler doesn't prevent
/// you from taking an address of this value, which is the primary
/// way of passing these values to a function that doesn't need ownership
/// of this type.
trait Copy[Self] {}
implementation Copy[i8] {}
implementation Copy[u8] {}
implementation Copy[i32] {}
implementation Copy[u32] {}
implementation Copy[u64] {}
implementation Copy[i64] {}
implementation Copy[usize] {}
implementation Copy[isize] {}
implementation Copy[Bool] {}
implementation[T] Copy[*T] {}

/// Marker trait to make a type non copyable
/// Implementing this for a user defined type prevents the compiler from
/// automatically generating an implementation of Copy, even if all members
/// are Copy.
/// Must only be implemented for user defined types.
trait NoCopy[Self] {}

import libc as libc;

def free[T](ptr: *mut T): Void {
    libc.free(pointer_cast[Void](ptr));
}

def unsafe_allocate_unitialized[T](): *T {
    return pointer_cast[T](libc.malloc(size_of[T]));
}

extern def __hds_pointer_add(*Void, usize): *mut Void = __hds_pointer_add;

def mut_pointer_add[T](ptr: *mut T, size: usize): *mut T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](ptr), size));
}

def pointer_add[T](ptr: *T, size: Size): *T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](ptr), size));
}

def offset[T](self: *T, index: Size): *T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](self), index * size_of[T]));
}
def offset_mut[T](self: *mut T, index: Size): *mut T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](self), index * size_of[T]));
}

def copy[T](destination: *mut T, source: *T, count: Size): Void {
    libc.memcpy(pointer_cast[Void](destination), pointer_cast[Void](source), count * size_of[T]);
}

def allocate[T](count: Size): *mut T {
    return pointer_cast[T](libc.malloc(count * size_of[T]));
}


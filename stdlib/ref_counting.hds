import libc as c;
import memory as memory;
import submodule.test_utils as u;

struct Ref {
    val mut m_count: Size;
    val mut m_data: *mut Void;
    val mut m_drop: *(*mut Void) -> Void;
}

def alloc(size: Size, drop: *(*mut Void) -> Void): *mut Ref {
    val mut ptr: *mut Ref = pointer_cast[Ref](c.malloc(size_of[Size] + size));
    *ptr.m_count = 1;
    *ptr.m_drop = drop;
    *ptr.m_data = pointer_cast[Void](
        memory.mut_pointer_add(ptr, size_of[Size])
    );
    return ptr;
}

def retain(self: *mut Ref): Void {
    *self.m_count = *self.m_count + 1;
}

def release(self: *mut Ref): Void {
    *self.m_count = *self.m_count - 1;
    if (*self.m_count == 0) {
        (*self.m_drop)(*self.m_data);
        memory.free(self);
    }
}



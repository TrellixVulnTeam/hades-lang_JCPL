import lib.string_slice as StringSlice;
import hades.memory as Memory;
import lib.error as err;
import libc as c;
import lib.free as Free;

/// Owns m_slice
struct t {
    val m_length: Size;
    val m_buffer: *mut Byte;
}

def as_slice(this: t): StringSlice.t {
    return StringSlice.t(this.m_length, this.m_buffer);
}

implement Free.Free for t {
    def free(this: t): Void {
        Memory.free(this.m_buffer);
    }
}

implement err.Printable for t {
    def print(this: t, file: *c.File): Void {
        this.as_slice().print(file);
    }
}
import lib.string_slice as StringSlice;
import libc as c;

interface Printable {
    def print(this: This, file: *c.File): Void;
}

implement Printable for StringSlice.t {
    def print(this: StringSlice.t, file: *c.File): Void {
        c.fprintf(file, b"%s", this.as_c_str());
    }
}
implement Printable for *Byte {
    def print(this: *Byte, file: *c.File): Void {
        c.fprintf(file, b"%s", this);
    }
}
implement Printable for Size {
    def print(this: Size, file: *c.File): Void {
        dump_size(file, this);
    }
}

def print[T: Printable](value: T): Void {
    value.print(stderr());
}

def println[T: Printable](value: T): Void {
    print(value);
    c.fprintf(stderr(), b"\n", b"");
}

extern def dump_size(*c.File, Size): Void = dump_size;
extern def dump_void_ptr(*c.File, *Void): Void = dump_void_ptr;
extern def get_stderr(): *c.File = get_stderr;
extern def get_stdout(): *c.File = get_stdout;
extern def get_stdin(): *c.File = get_stdin;

def stderr(): *c.File {
    return get_stderr();
}
def stdout(): *c.File {
    return get_stdout();
}
def stdin(): *c.File {
    return get_stdin();
}

def dump_ptr[T](ptr: *T): Void {
    dump_void_ptr(stderr(), pointer_cast[Void](ptr));
}

extern def fdump_char(*c.File, Byte): Void = fdump_char;
def dump_char(c: Byte): Void {
    fdump_char(stderr(), c);
}
import hades.memory as Memory;
import lib.error as err;
import cjson as cJSON;
import libc as c;
import lib.io as IO;
import lib.slice as Slice;
import lib.string_slice as StringSlice;

import liblsp.requests.request as LSPRequest;
import liblsp.responses.response as LSPResponse;
import liblsp.responses.initialize_result as LSPInitializeResult;
import liblsp.requests.initialize as LSPInitialize;
import liblsp.header as LSPHeader;
import liblsp.server_capabilities as LSPServerCapabilities;
import liblsp.json_extensions as J;

struct HadesServerImpl {
    val m_stdin: IO.Stream;
    val m_stdout: IO.Stream;
}
struct t {
    val m_ptr: *mut HadesServerImpl;
}
def create(): t {
    return t(new HadesServerImpl(
        IO.Stream(err.stdin()),
        IO.Stream(err.stdout())
    ));
}

def free(this: t): Void {
    return Memory.free(this.m_ptr);
}
def stdin(this: t): IO.Stream {
    return *this.m_ptr.m_stdin;
}
def stdout(this: t): IO.Stream {
    return *this.m_ptr.m_stdout;
}
def listen(this: t): Void {
    while true {
        val header = LSPHeader.parse(this.stdin());
        val size = header.content_length();
        val slice = Slice.alloc[Byte](size);
        defer slice.free();

        this.stdin().read(slice, size);

        val message_json = cJSON.Parse(slice.buffer());
        defer message_json.free();
        
        err.print(b"Received request: ");
        err.println(message_json);

        val request = LSPRequest.from_json(message_json);
        this.handle_request(request);
    }
}

def handle_request(this: t, request: LSPRequest.t): Void {
    if request.is_initialize() {
        this.handle_initialize_request(request.id(), request.payload[LSPInitialize.t]());
    }
}

def handle_initialize_request(this: t, id: Int, request: LSPInitialize.t): Void {
    val capabilities = LSPServerCapabilities.t(true);
    val response = LSPResponse.t(id, LSPResponse.TAG_INITIALIZE_RESULT, LSPInitializeResult.t(capabilities));
    this.respond(response);
}

def respond(this: t, response: LSPResponse.t): Void {
    write_lsp_response(response, this.stdout());
    err.print(b"Responding: ");
    val json = response.to_json(); defer json.free();
    err.println(json);
}

def write_lsp_response(response: LSPResponse.t, stream: IO.Stream): Void {
    val json = response.to_json(); defer json.free();
    val c_string = json.to_c_string(); defer Memory.free(c_string);
    val content_length = c.strlen(c_string);
    stream.write_c_string(b"Content-Length: ");
    content_length.print(stream.file());
    stream.write_c_string(b"\r\n\r\n");
    stream.write_c_string(c_string);
    stream.flush();
}


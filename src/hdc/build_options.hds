import libc as c;
import lib.panic as Panic;
import lib.args as Args;
import lib.string_slice as StringSlice;
import lib.path as Path;
import lib.slice as Slice;
import hades.memory as memory;

const panic = Panic.panic;
const str = StringSlice.from_static;

struct BuildOptionsImpl {
    val m_main: Path.t;
    val m_output: Path.t;
    val m_runtime: Path.t;
}

struct t {
    val m_ptr: *mut BuildOptionsImpl;
}

const USAGE = b"
Usage: hdc
    --main <PATH>
    --directories <PATH> <PATH> ...
    --output <PATH>
    --runtime <PATH>
    --cflags <OPTIONAL PATH>
";
def new_from_args(argc: Size, argv: **Byte): t {
    if (argc < 2) {
        panic(USAGE);
    }
    val args = Args.from_args(argc, argv);
    return t(new BuildOptionsImpl(
        Path.t(args.one(str(b"--main"), USAGE)),
        Path.t(args.one(str(b"--output"), USAGE)),
        Path.t(args.one(str(b"--runtime"), USAGE))
    ));
}

def drop(this: t): Void {
    val mut ptr: *mut BuildOptionsImpl = this.m_ptr;
    memory.free(ptr);
}


import lib.panic as Panic;
import lib.error as err;
import lib.free as Free;
import hades.memory as Memory;
const panic = Panic.panic;

struct Node[T] {
    val mut m_next: *mut Node[T];
    val m_data: T;
}

struct ListImpl[T] {
    val mut m_head: *mut Node[T];
    val mut m_tail: *mut Node[T];
    val mut m_length: Size;
}

struct t[T] {
    val m_ptr: *mut ListImpl[T];
}

def empty[T](): t[T] {
    return t(new ListImpl[T](nullptr, nullptr, 0));
}

def length[T](this: t[T]): Size {
    return *this.m_ptr.m_length;
}


def append[T](this: t[T], item: T): Void {
    val _this = *this.m_ptr;
    if this.length() == 0 {

        val new_length: Size = 1;
        _this.m_length = new_length;
        _this.m_head = new Node(nullptr, item);
        _this.m_tail = _this.m_head;
    } else {
        val new_node = new Node(nullptr, item);
        _this.m_length = _this.m_length + 1;
        val old_tail = _this.m_tail;
        _this.m_tail = new_node;
        *old_tail.m_next = new_node;
    }
    *this.m_ptr = _this;
}


def err_print[T: err.Printable](this: t[T]): Void {

    val _this = *this.m_ptr;
    val mut _iter = this.iter();
    val iter = &mut _iter;
    val mut current = iter.next();

    err.print(b"[ ");
    while current != nullptr {
        err.print(*current);
        err.print(b",\n");
        current = iter.next();
    }

    err.println(b" ]");
}

def free[T: Free.Free](this: t[T]): Void {
    val mut _iter = this.iter();
    val iter = &mut _iter;
    val mut current_node = iter._next_node();

    while current_node != nullptr {

        (*current_node.m_data).free();
        Memory.free(current_node);

        current_node = iter._next_node();
    }

}


def iter[T](this: t[T]): ListIter[T] {
    return ListIter(*this.m_ptr.m_head);
}

def _next_node[T](this: *mut ListIter[T]): *mut Node[T] {
    val current = *this.current;
    if current == nullptr {
        return nullptr;
    }
    *this.current = *current.m_next;
    return current;
}

def next[T](this: *mut ListIter[T]): *T {
    val current_node = this._next_node();
    if current_node == nullptr {
        return nullptr;
    }
    return current_node.m_data;

}

struct ListIter[T] {
    val mut current: *mut Node[T];
}

import hades.primitives.int as hds_int;
import lib.string_slice as StringSlice;
import liblsp.json_extensions as J;
import lib.error as err;
import lib.cast as Cast;
import libc as c;
import cjson as cjson;
import liblsp.responses.initialize_result as InitializeResult;

type Result = union[InitializeResult.t];
struct t {
    val m_id: Int;
    val m_tag: Size;
    val m_result: Result;
}

const TAG_UNKNOWN: Size = -1;
const TAG_INITIALIZE_RESULT: Size = 0;

def id(this: t): Int {
    return this.m_id;
}

def tag(this: t): Size {
    return this.m_tag;
}

def result[T](this: t): T {
    return Cast.cast(this.m_result);
}

implement J.JsonEncodable for t {
    def encode_json(this: t): *mut cjson.t {
        val mut result_json: *mut cjson.t = nullptr;
        if (this.tag() == TAG_INITIALIZE_RESULT) {
            result_json = this.result[InitializeResult.t]().to_json();
        }
        return J.create_object()
            .add(b"id", this.id())
            .add(b"jsonrpc", b"2.0")
            .add(b"result", result_json);
    }
}


implement err.Printable for t {
    def print(this: t, file: *c.File): Void {
        val json = this.encode_json(); defer json.free();
        json.print(file);
    }
}


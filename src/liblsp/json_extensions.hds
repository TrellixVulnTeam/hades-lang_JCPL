import cjson as cj;
import lib.assert as Assert;
import lib.string_slice as StringSlice;
import lib.error as err;
import libc as c;
import hades.memory as Memory;
import hades.primitives.size as size;
const assert = Assert.assert_with_message;

def get(this: *cj.t, key: *Byte): *cj.t {
    assert(this.is_object(), b"json_extensions::get: Expected an object");
    return cj.GetObjectItem(this, key);
}

def is_object(this: *cj.t): Bool {
    return cj.IsObject(this);
}
def is_string(this: *cj.t): Bool {
    return cj.IsString(this);
}
def as_c_string(this: *cj.t): *Byte {
    assert(this.is_string(), b"json_extensions::as_c_string: Expected a string value");
    return cj.GetStringValue(this);
}
def to_string_slice(this: *cj.t): StringSlice.t {
    return this.as_c_string().to_string_slice();
}

def create_object(): *mut cj.t {
    val obj = cj.CreateObject();
    assert(obj != nullptr, b"Couldn't create cJSON object");
    return obj;
}

def create_bool(value: Bool): *mut cj.t {
    return cj.CreateBool(value);
}

def create_number(value: Double): *mut cj.t {
    return cj.CreateNumber(value);
}

def create_string(value: *Byte): *mut cj.t {
    return cj.CreateString(value);
}

def add[Value: JsonEncodable](this: *mut cj.t, key: *Byte, value: Value): *mut cj.t {
    assert(this.is_object(), b"json_extensions::add_key: Expected an object");
    val added = cj.AddItemToObject(this, key, value.encode_json());
    assert(added, b"json_extensions::add_key: Unable to add item to object");
    return this;
}

def free(this: *mut cj.t): Void {
    cj.Delete(this);
}

def to_formatted_c_string(this: *cj.t): *mut Byte {
    return cj.Print(this);
}

def to_c_string(this: *cj.t): *mut Byte {
    return cj.PrintUnformatted(this);
}

implement err.Printable for *cj.t {
    def print(this: *cj.t, file: *c.File): Void {
        val str = this.to_formatted_c_string(); defer Memory.free(str);

        str.print(file);
    }
}

interface JsonEncodable {
    def encode_json(this: This): *mut cj.t;
}

implement JsonEncodable for *mut cj.t {
    def encode_json(this: *mut cj.t): *mut cj.t {
        return this;
    }
}

implement JsonEncodable for *Byte {
    def encode_json(this: *Byte): *mut cj.t {
        return create_string(this);
    }
}

implement JsonEncodable for Bool {
    def encode_json(this: Bool): *mut cj.t {
        return create_bool(this);
    }
}

implement JsonEncodable for Size {
    def encode_json(this: Size): *mut cj.t {
        return create_number(this.to_double());
    }
}



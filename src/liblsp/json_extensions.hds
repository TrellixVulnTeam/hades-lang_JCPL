import cjson as cj;
import lib.assert as Assert;
import lib.string_slice as StringSlice;
const assert = Assert.assert_with_message;

def get(this: *cj.t, key: *Byte): *cj.t {
    assert(this.is_object(), b"json_extensions::get: Expected an object");
    return cj.GetObjectItem(this, key);
}

def is_object(this: *cj.t): Bool {
    return cj.IsObject(this);
}
def is_string(this: *cj.t): Bool {
    return cj.IsString(this);
}
def as_c_string(this: *cj.t): *Byte {
    assert(this.is_string(), b"json_extensions::as_c_string: Expected a string value");
    return cj.GetStringValue(this);
}
def to_string_slice(this: *cj.t): StringSlice.t {
    return this.as_c_string().to_string_slice();
}

def create_object(): *mut cj.t {
    val obj = cj.CreateObject();
    assert(obj != nullptr, b"Couldn't create cJSON object");
    return obj;
}

def add(this: *mut cj.t, key: *Byte, value: *cj.t): *mut cj.t {
    assert(this.is_object(), b"json_extensions::add_key: Expected an object");
    val added = cj.AddItemToObject(this, key, value);
    assert(added, b"json_extensions::add_key: Unable to add item to object");
    return this;
}

def free(this: *mut cj.t): Void {
    cj.Delete(this);
}


import liblsp.requests.initialize as Initialize;
import lib.string_slice as StringSlice;
import lib.error as err;
import libc as c;
import cjson as CJson;
import lib.assert as Assert;
import liblsp.json_extensions as json_extensions;
import lib.cast as Cast;
import liblsp.requests.text_document.did_open as TextDocumentDidOpen;
const assert = Assert.assert;

type Params = union[Bool, Initialize.t, TextDocumentDidOpen.t];

const METHOD_INITIALIZE = b"initialize";
const METHOD_TEXT_DOCUMENT_DID_OPEN = b"textDocument/didOpen";


const TAG_INVALID: Size = -1;
const TAG_INITIALIZE: Size = 0;
const TAG_TEXT_DOCUMENT_DID_OPEN: Size = 1;

struct t {
    val m_id: Int;
    val m_method: StringSlice.t;
    val m_tag: Size;
    val m_params: Params;
}


def tag(this: t): Size {
    return this.m_tag;
}

def id(this: t): Int {
    return this.m_id;
}

def method(this: t): StringSlice.t {
    return this.m_method;
}

def from_json(from: *CJson.t): t {
    assert(from.is_object(), b"liblsp.requests.request::from_json: expected a json object");
    val method = from.get(b"method").to_string_slice();
    val id = from.get(b"id");
    val mut params: Params = Cast.cast(true);
    val mut tag = TAG_INVALID;
    if method.equals(METHOD_INITIALIZE.to_string_slice()) {
        params = Cast.cast(Initialize.from_json(from.get(b"params")));
        tag = TAG_INITIALIZE;
    }
    if method.equals(METHOD_TEXT_DOCUMENT_DID_OPEN.to_string_slice()) {
        params = Cast.cast(TextDocumentDidOpen.from_json(from.get(b"params")));
        tag = TAG_TEXT_DOCUMENT_DID_OPEN;
    }
    val mut id_int = -1;
    if id != nullptr {
        id_int = id.as_int();
    }
    return t(id_int, method, tag, params);
}

def params[T](this: t): T {
    return Cast.cast(this.m_params);
}

def is_initialize(this: t): Bool {
    return this.tag() == TAG_INITIALIZE;
}

def is_text_document_did_open(this: t): Bool {
    return this.tag() == TAG_TEXT_DOCUMENT_DID_OPEN;
}

implement err.Printable for t {
    def print(this: t, file: *c.File): Void {
        b"LSPRequest {\n".print(file);
        b"  id: ".print(file);
        this.m_id.print(file);
        b",\n".print(file);
        b"  method: ".print(file);
        this.m_method.print(file);
        b",\n".print(file);

        b"  tag: ".print(file);
        this.m_tag.print(file);
        b",\n".print(file);

        b"  params: ".print(file);

        if this.m_tag == TAG_INITIALIZE {
            val params = this.params[Initialize.t]();
            params.print(file);
        }
        if this.m_tag == TAG_TEXT_DOCUMENT_DID_OPEN {
            val params = this.params[TextDocumentDidOpen.t]();
            params.print(file);
        }

        b"\n}\n".print(file);
    }
}

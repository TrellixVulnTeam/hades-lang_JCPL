import libc as c;

interface Printable[Self] {
    def print(self: Self, file: *c.File): Void;
}

implementation printable_bool: Printable[Bool] {
    def print(self: Bool, file: *c.File): Void {
        if self {
            c.fputs(b"true", file);
        }
    }
}

implementation printable_box[T]: Printable[Box[T]] where(printable_t: Printable[T]) {
    def print(self: Box[T], file: *c.File): Void {
        c.fputs(b"Box(");
        print_alias(self.value); // because print might refer to this function;
        c.fputs(b")");
    }
}

struct Box[T] {
    val value: T;
}

def print[T](value: T) where(printable_t: Printable[T]): Void {
    printable_t.print(value, c.stdout());
}
def print_alias[T](value: T) where(printable_t: Printable[T]): Void {
    print(value);
}

def println[T](value: T) where(printable_t: Printable[T]): Void {
    print(value);
    c.fputs(b"\n");
}

def main(): Void {
    println(true);
    println(false);
    println(Box(true));
    println(Box(false));
}
